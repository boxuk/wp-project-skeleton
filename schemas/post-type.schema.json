{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"type": "object",
	"definitions": {
		"example_block": {
			"example": [
				[
					"core/paragraph",
					{ "placeholder": "Add your custom text here" },
					[]
				]
			]
		},
		"template_item": {
			"type": "array",
			"minItems": 1,
			"description": "A template item, consisting of a block name, an object of block attributes, and an array of inner blocks. Inner blocks are in the same format as a template-item and allows infinite recursion.",
			"items": [
				{
					"type": "string",
					"match": "^[a-zA-Z0-9_]+$",
					"desciption": "Name of the block"
				},
				{
					"type": "object",
					"desciption": "Attributes for the block"
				},
				{
					"type": "array",
					"items": {
						"$ref": "#/definitions/template_item"
					},
					"desciption": "InnerBlocks"
				}
			],
			"example": [
				[
					"core/paragraph",
					{ "placeholder": "Add your custom text here" },
					[]
				],
				[
					"core/cover",
					{ "align": "center" },
					[
						[
							"core/paragraph",
							{ "placeholder": "Add your custom text here" },
							[]
						]
					]
				]
			]
		}
	},
	"properties": {
		"post_types": {
			"type": "object",
			"description": "Post types to register",
			"uniqueItems": true,
			"patternProperties": {
				"^[a-zA-Z0-9_]+$": {
					"type": "object",
					"properties": {
						"label": {
							"type": "string",
							"description": "Name of the post type shown in the menu. Usually plural.",
							"default": "Default valie is value of `labels.name`"
						},
						"labels": {
							"type": "object",
							"description": "An array of labels for this post type. If not set, post labels are inherited for non-hierarchical types and page labels for hierarchical ones. See [get_post_type_labels()](https://developer.wordpress.org/reference/functions/get_post_type_labels/) for a full list of supported labels.",
							"properties": {
								"name": {
									"type": "string",
									"description": "General name for the post type, usually plural. The same and overridden by $post_type_object->label. Default is ‘Posts’ / ‘Pages’."
								},
								"singular_name": {
									"type": "string",
									"description": "Name for one object of this post type. Default is ‘Post’ / ‘Page’."
								},
								"add_new": {
									"type": "string",
									"description": "Default is ‘Add New’ for both hierarchical and non-hierarchical types."
								},
								"add_new_item": {
									"type": "string",
									"description": "Label for adding a new singular item. Default is ‘Add New Post’ / ‘Add New Page’."
								},
								"edit_item": {
									"type": "string",
									"description": "Label for editing a singular item. Default is ‘Edit Post’ / ‘Edit Page’."
								},
								"new_item": {
									"type": "string",
									"description": "Label for the new item page title. Default is ‘New Post’ / ‘New Page’."
								},
								"view_item": {
									"type": "string",
									"description": "Label for viewing a singular item. Default is ‘View Post’ / ‘View Page’."
								},
								"view_items": {
									"type": "string",
									"description": "Label for viewing post type archives. Default is ‘View Posts’ / ‘View Pages’."
								},
								"search_items": {
									"type": "string",
									"description": "Label for searching plural items. Default is ‘Search Posts’ / ‘Search Pages’."
								},
								"not_found": {
									"type": "string",
									"description": "Label displayed when no posts are found. Default is ‘No posts found’ / ‘No pages found’."
								},
								"not_found_in_trash": {
									"type": "string",
									"description": "Label displayed when no posts are in the trash. Default is ‘No posts found in Trash’ / ‘No pages found in Trash’."
								},
								"parent_item_colon": {
									"type": "string",
									"description": "Label used to prefix parents of hierarchical items. Not used on non-hierarchical post types. Default is ‘Parent Page:’."
								},
								"all_items": {
									"type": "string",
									"description": "Label to signify all items in a submenu link. Default is ‘All Posts’ / ‘All Pages’."
								},
								"archives": {
									"type": "string",
									"description": " Label for archives in nav menus. Default is ‘Post Archives’ / ‘Page Archives’."
								},
								"attributes": {
									"type": "string",
									"description": "Label for the attributes meta box. Default is ‘Post Attributes’ / ‘Page Attributes’."
								},
								"insert_into_item": {
									"type": "string",
									"description": "Label for inserting a single item into a parent. Default is ‘Insert into post’ / ‘Insert into page’."
								},
								"uploaded_to_this_item": {
									"type": "string",
									"description": "Label for the media frame filter. Default is ‘Uploaded to this post’ / ‘Uploaded to this page’."
								},
								"featured_image": {
									"type": "string",
									"description": "Label for the featured image meta box title. Default is ‘Featured Image’."
								},
								"set_featured_image": {
									"type": "string",
									"description": "Label for setting the featured image. Default is ‘Set featured image’."
								},
								"remove_featured_image": {
									"type": "string",
									"description": "Label for removing the featured image. Default is ‘Remove featured image’."
								},
								"use_featured_image": {
									"type": "string",
									"description": "Label in the media frame for using a featured image. Default is ‘Use as featured image’."
								},
								"menu_name": {
									"type": "string",
									"description": "Label for the menu name. Default is the same as `name`."
								},
								"filter_items_list": {
									"type": "string",
									"description": "Label for the table views hidden heading."
								},
								"filter_by_date": {
									"type": "string",
									"description": "Label for the date filter in the table view."
								},
								"items_list_navigation": {
									"type": "string",
									"description": "Label for the table pagination hidden heading."
								},
								"items_list": {
									"type": "string",
									"description": "Label for the table hidden heading."
								},
								"item_published": {
									"type": "string",
									"description": "Label used when an item is published. Default is ‘Post published.’ / ‘Page published.’"
								},
								"item_published_privately": {
									"type": "string",
									"description": "Label used when an item is published with private visibility. Default is ‘Post published privately.’ / ‘Page published privately.’"
								},
								"item_reverted_to_draft": {
									"type": "string",
									"description": "Label used when an item is switched to a draft. Default is ‘Post reverted to draft.’ / ‘Page reverted to draft.’"
								},
								"item_trashed": {
									"type": "string",
									"description": "Label used when an item is sent to the trash. Default is ‘Post trashed.’ / ‘Page trashed.’"
								},
								"item_scheduled": {
									"type": "string",
									"description": "Label used when an item is scheduled for publishing. Default is ‘Post scheduled.’ / ‘Page scheduled.’"
								},
								"item_updated": {
									"type": "string",
									"description": "Label used when an item is updated. Default is ‘Post updated.’ / ‘Page updated.’"
								},
								"item_link": {
									"type": "string",
									"description": "Title for a navigation link block variation. Default is ‘Post Link’ / ‘Page Link’."
								},
								"item_link_description": {
									"type": "string",
									"description": "Description for a navigation link block variation. Default is ‘A link to a post.’ / ‘A link to a page.’"
								}
							}
						},
						"description": {
							"type": "string",
							"description": "A short descriptive summary of what the post type is."
						},
						"public": {
							"type": "boolean",
							"description": "Whether a post type is intended for use publicly either via the admin interface or by front-end users. While the default settings of $exclude_from_search, $publicly_queryable, $show_ui, and $show_in_nav_menus are inherited from $public, each does not rely on this relationship and controls a very specific intention.",
							"default": false
						},
						"heirarchical": {
							"type": "boolean",
							"description": "Whether the post type is hierarchical (e.g. page)",
							"default": false
						},
						"exclude_from_search": {
							"type": "boolean",
							"description": "Whether to exclude posts with this post type from front end search results. Default is the opposite value of $public."
						},
						"publicly_queryable": {
							"type": "boolean",
							"description": "Whether queries can be performed on the front end for the post type as part of parse_request(). Endpoints would include: * ?post_type={post_type_key} * ?{post_type_key}={single_post_slug} * ?{post_type_query_var}={single_post_slug} If not set, the default is inherited from $public."
						},
						"show_ui": {
							"type": "boolean",
							"description": "Whether to generate and allow a UI for managing this post type in the admin. Default is value of $public."
						},
						"show_in_menu": {
							"type": [ "boolean", "string" ],
							"desciption": "Where to show the post type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu ('tools.php' or 'edit.php?post_type=page', for example), the post type will be placed as a sub-menu of that."
						},
						"show_in_nav_menus": {
							"type": "boolean",
							"description": "Makes this post type available for selection in navigation menus."
						},
						"show_in_admin_bar": {
							"type": "boolean",
							"description": "Makes this post type available via the admin bar. Default is value of $show_in_menu"
						},
						"show_in_rest": {
							"type": "boolean",
							"description": "Whether to include the post type in the REST API. Set this to true for the post type to be available in the block editor."
						},
						"rest_base": {
							"type": "string",
							"description": "To change the base URL of REST API route. Default is $post_type."
						},
						"rest_namespace": {
							"type": "string",
							"description": "To change the namespace of REST API route. Default is $rest_base."
						},
						"rest_controller_class": {
							"type": "string",
							"description": "REST API Controller class name. Default is 'WP_REST_Posts_Controller'."
						},
						"menu_position": {
							"type": [ "integer", "null" ],
							"description": "The position in the menu order the post type should appear. To work, $show_in_menu must be true. Default null (at the bottom).",
							"default": null
						},
						"menu_icon": {
							"type": "string",
							"description": "The URL to the icon to be used for this menu. Pass a base64-encoded SVG using a data URI, which will be colored to match the color scheme -- this should begin with 'data:image/svg+xml;base64,'. Pass the name of a Dashicons helper class to use a font icon, e.g. 'dashicons-chart-pie'. Pass 'none' to leave div.wp-menu-image empty so an icon can be added via CSS. Defaults to use the posts icon."
						},
						"capability_type": {
							"type": [ "string", "array" ],
							"description": "The string to use to build the read, edit, and delete capabilities. May be passed as an array to allow for alternative plurals when using this argument as a base to construct the capabilities, e.g. array('story', 'stories'). Default 'post'.",
							"default": "post"
						},
						"capabilities": {
							"type": "object",
							"description": "Array of capabilities for this post type. $capability_type is used as a base to construct capabilities by default.",
							"items": {
								"type": "object",
								"properties": {
									"edit_post": {
										"type": "string",
										"description": "Capability required to edit this post type."
									},
									"read_post": {
										"type": "string",
										"description": "Capability required to read this post type."
									},
									"delete_post": {
										"type": "string",
										"description": "Capability required to delete this post type."
									},
									"edit_posts": {
										"type": "string",
										"description": "Capability required to edit posts of this post type."
									},
									"edit_others_posts": {
										"type": "string",
										"description": "Capability required to edit others posts of this post type."
									},
									"delete_posts": {
										"type": "string",
										"description": "Capability required to delete posts of this post type."
									},
									"publish_posts": {
										"type": "string",
										"description": "Capability required to publish posts of this post type."
									},
									"read_private_posts": {
										"type": "string",
										"description": "Capability required to read private posts of this post type."
									}
								}
							}
						},
						"map_meta_cap": {
							"type": "boolean",
							"description": "Whether to use the internal default meta capability handling.",
							"default": false
						},
						"supports": {
							"type": "array",
							"description": "Core feature(s) the post type supports. Serves as an alias for calling add_post_type_support() directly.",
							"default": [ "title", "editor" ],
							"items": {
								"type": "string",
								"enum": [
									"title",
									"editor",
									"author",
									"thumbnail",
									"excerpt",
									"trackbacks",
									"custom-fields",
									"comments",
									"revisions",
									"page-attributes",
									"post-formats"
								]
							}
						},
						"taxonomies": {
							"type": "array",
							"description": "An array of taxonomy identifiers that will be registered for the post type. Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type() .",
							"items": {
								"type": "string",
								"pattern": "^[a-zA-Z0-9_]+$",
								"description": "Taxonomy identifier"
							}
						},
						"has_archive": {
							"type": [ "boolean", "string" ],
							"description": "Whether there should be post type archives, or if a string, the archive slug to use. Will generate the proper rewrite rules if $rewrite is enabled. Default false.",
							"default": false
						},
						"rewrite": {
							"type": [ "boolean", "object" ],
							"description": "Triggers the handling of rewrites for this post type. To prevent rewrite, set to false. Defaults to true, using $post_type as slug. To specify rewrite rules, an object can be passed.",
							"default": true,
							"properties": {
								"slug": {
									"type": "string",
									"description": "Customize the permastruct slug. Defaults to $post_type key."
								},
								"with_front": {
									"type": "boolean",
									"description": "Whether the permastruct should be prepended with WP_Rewrite::$front.",
									"default": true
								},
								"feeds": {
									"type": "boolean",
									"description": "Whether the feed permastruct should be built for this post type. Default is value of $has_archive."
								},
								"pages": {
									"type": "boolean",
									"default": true,
									"description": "Whether the permastruct should provide for pagination. Default true."
								},
								"ep_mask": {
									"type": "integer"
								}
							}
						},
						"query_var": {
							"type": [ "string", "boolean" ],
							"description": "Sets the query_var key for this post type. Defaults to $post_type key. If false, a post type cannot be loaded at ?{query_var}={post_slug}. If specified as a string, the query ?{query_var_string}={post_slug} will be valid."
						},
						"can_export": {
							"description": "Whether to allow this post type to be exported. Default true.",
							"default": true,
							"type": "boolean"
						},
						"delete_with_user": {
							"enum": [ true, false, null ],
							"description": "Whether to delete posts of this type when deleting a user. If true, posts of this type belonging to the user will be moved to Trash when the user is deleted. If false, posts of this type belonging to the user will *not* be trashed or deleted. If not set (the default), posts are trashed if post type supports the 'author' feature. Otherwise posts are not trashed or deleted.",
							"default": null
						},
						"template": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/template_item"
							},
							"description": "An array of template-items to be used as the default template for this post type. A template item is defined as an array/tuple of block-name, attributes, and an array of inner blocks.",
							"examples": [
								[
									[
										"core/paragraph",
										{
											"placeholder": "Add your custom text here"
										},
										[]
									],
									[
										"core/cover",
										{ "align": "center" },
										[
											[
												"core/heading",
												{ "level": "3" },
												[]
											],
											[
												"core/paragraph",
												{
													"placeholder": "Add your custom text here"
												},
												[]
											]
										]
									]
								],
								[
									[
										"core/paragraph",
										{
											"placeholder": "Add your custom text here"
										},
										[]
									]
								]
							]
						},
						"template_lock": {
							"enum": [ "all", "insert", "contentOnly", false ],
							"description": "Whether the block template should be locked if $template is set"
						}
					}
				}
			}
		}
	}
}
